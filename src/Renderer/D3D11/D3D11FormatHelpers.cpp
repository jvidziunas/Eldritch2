/*==================================================================*\
  D3D11FormatHelpers.cpp
  ------------------------------------------------------------------
  Purpose:
  

  ------------------------------------------------------------------
  ©2010-2015 Eldritch Entertainment, LLC.
\*==================================================================*/


//==================================================================//
// INCLUDES
//==================================================================//
#include <Renderer/D3D11/D3D11FormatHelpers.hpp>
#include <Utility/Math/StandardLibrary.hpp>
//------------------------------------------------------------------//
#include <DXGIFormat.h>
//------------------------------------------------------------------//

using namespace ::Eldritch2::Renderer;
using namespace ::Eldritch2;

namespace Eldritch2 {
namespace Renderer {

	ETNoAliasHint uint32 BitsPerPixel( ::DXGI_FORMAT fmt ) {
		switch( fmt ) {
			case ::DXGI_FORMAT_R32G32B32A32_TYPELESS:
			case ::DXGI_FORMAT_R32G32B32A32_FLOAT:
			case ::DXGI_FORMAT_R32G32B32A32_UINT:
			case ::DXGI_FORMAT_R32G32B32A32_SINT: {
				return 128u;
				break;
			}	// case DXGI_FORMAT_R32G32B32A32_TYPELESS, case DXGI_FORMAT_R32G32B32A32_FLOAT, case DXGI_FORMAT_R32G32B32A32_UINT, case DXGI_FORMAT_R32G32B32A32_SINT

		// ---

			case ::DXGI_FORMAT_R32G32B32_TYPELESS:
			case ::DXGI_FORMAT_R32G32B32_FLOAT:
			case ::DXGI_FORMAT_R32G32B32_UINT:
			case ::DXGI_FORMAT_R32G32B32_SINT: {
				return 96u;
				break;
			}	// case DXGI_FORMAT_R32G32B32_TYPELESS, case DXGI_FORMAT_R32G32B32_FLOAT, case DXGI_FORMAT_R32G32B32_UINT, case DXGI_FORMAT_R32G32B32_SINT

		// ---

			case ::DXGI_FORMAT_R16G16B16A16_TYPELESS:
			case ::DXGI_FORMAT_R16G16B16A16_FLOAT:
			case ::DXGI_FORMAT_R16G16B16A16_UNORM:
			case ::DXGI_FORMAT_R16G16B16A16_UINT:
			case ::DXGI_FORMAT_R16G16B16A16_SNORM:
			case ::DXGI_FORMAT_R16G16B16A16_SINT:
			case ::DXGI_FORMAT_R32G32_TYPELESS:
			case ::DXGI_FORMAT_R32G32_FLOAT:
			case ::DXGI_FORMAT_R32G32_UINT:
			case ::DXGI_FORMAT_R32G32_SINT:
			case ::DXGI_FORMAT_R32G8X24_TYPELESS:
			case ::DXGI_FORMAT_D32_FLOAT_S8X24_UINT:
			case ::DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS:
			case ::DXGI_FORMAT_X32_TYPELESS_G8X24_UINT: {
				return 64u;
				break;
			}	// case DXGI_FORMAT_R16G16B16A16_TYPELESS, case DXGI_FORMAT_R16G16B16A16_FLOAT, case DXGI_FORMAT_R16G16B16A16_UNORM, case DXGI_FORMAT_R16G16B16A16_UINT,
				// case DXGI_FORMAT_R16G16B16A16_SNORM, case DXGI_FORMAT_R16G16B16A16_SINT, case DXGI_FORMAT_R32G32_TYPELESS, case DXGI_FORMAT_R32G32_FLOAT, case DXGI_FORMAT_R32G32_UINT,
				// case DXGI_FORMAT_R32G32_SINT, case DXGI_FORMAT_R32G8X24_TYPELESS, case DXGI_FORMAT_D32_FLOAT_S8X24_UINT, case DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS, case DXGI_FORMAT_X32_TYPELESS_G8X24_UINT

		// ---

			case ::DXGI_FORMAT_R10G10B10A2_TYPELESS:
			case ::DXGI_FORMAT_R10G10B10A2_UNORM:
			case ::DXGI_FORMAT_R10G10B10A2_UINT:
			case ::DXGI_FORMAT_R11G11B10_FLOAT:
			case ::DXGI_FORMAT_R8G8B8A8_TYPELESS:
			case ::DXGI_FORMAT_R8G8B8A8_UNORM:
			case ::DXGI_FORMAT_R8G8B8A8_UNORM_SRGB:
			case ::DXGI_FORMAT_R8G8B8A8_UINT:
			case ::DXGI_FORMAT_R8G8B8A8_SNORM:
			case ::DXGI_FORMAT_R8G8B8A8_SINT:
			case ::DXGI_FORMAT_R16G16_TYPELESS:
			case ::DXGI_FORMAT_R16G16_FLOAT:
			case ::DXGI_FORMAT_R16G16_UNORM:
			case ::DXGI_FORMAT_R16G16_UINT:
			case ::DXGI_FORMAT_R16G16_SNORM:
			case ::DXGI_FORMAT_R16G16_SINT:
			case ::DXGI_FORMAT_R32_TYPELESS:
			case ::DXGI_FORMAT_D32_FLOAT:
			case ::DXGI_FORMAT_R32_FLOAT:
			case ::DXGI_FORMAT_R32_UINT:
			case ::DXGI_FORMAT_R32_SINT:
			case ::DXGI_FORMAT_R24G8_TYPELESS:
			case ::DXGI_FORMAT_D24_UNORM_S8_UINT:
			case ::DXGI_FORMAT_R24_UNORM_X8_TYPELESS:
			case ::DXGI_FORMAT_X24_TYPELESS_G8_UINT:
			case ::DXGI_FORMAT_R9G9B9E5_SHAREDEXP:
			case ::DXGI_FORMAT_R8G8_B8G8_UNORM:
			case ::DXGI_FORMAT_G8R8_G8B8_UNORM:
			case ::DXGI_FORMAT_B8G8R8A8_UNORM:
			case ::DXGI_FORMAT_B8G8R8X8_UNORM:
			case ::DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM:
			case ::DXGI_FORMAT_B8G8R8A8_TYPELESS:
			case ::DXGI_FORMAT_B8G8R8A8_UNORM_SRGB:
			case ::DXGI_FORMAT_B8G8R8X8_TYPELESS:
			case ::DXGI_FORMAT_B8G8R8X8_UNORM_SRGB: {
				return 32u;
				break;
			}	// case DXGI_FORMAT_R10G10B10A2_TYPELESS, case DXGI_FORMAT_R10G10B10A2_UNORM, case DXGI_FORMAT_R10G10B10A2_UINT, case DXGI_FORMAT_R11G11B10_FLOAT, case DXGI_FORMAT_R8G8B8A8_TYPELESS,
				// case DXGI_FORMAT_R8G8B8A8_UNORM, case DXGI_FORMAT_R8G8B8A8_UNORM_SRGB, case DXGI_FORMAT_R8G8B8A8_UINT, case DXGI_FORMAT_R8G8B8A8_SNORM, case DXGI_FORMAT_R8G8B8A8_SINT,
				// case DXGI_FORMAT_R16G16_TYPELESS, case DXGI_FORMAT_R16G16_FLOAT, case DXGI_FORMAT_R16G16_UNORM, case DXGI_FORMAT_R16G16_UINT, case DXGI_FORMAT_R16G16_SNORM, case DXGI_FORMAT_R16G16_SINT,
				// case DXGI_FORMAT_R32_TYPELESS, case DXGI_FORMAT_D32_FLOAT, case DXGI_FORMAT_R32_FLOAT, case DXGI_FORMAT_R32_UINT, case DXGI_FORMAT_R32_SINT, case DXGI_FORMAT_R24G8_TYPELESS,
				// case DXGI_FORMAT_D24_UNORM_S8_UINT, case DXGI_FORMAT_R24_UNORM_X8_TYPELESS, case DXGI_FORMAT_X24_TYPELESS_G8_UINT, case DXGI_FORMAT_R9G9B9E5_SHAREDEXP, case DXGI_FORMAT_R8G8_B8G8_UNORM,
				// case DXGI_FORMAT_G8R8_G8B8_UNORM, case DXGI_FORMAT_B8G8R8A8_UNORM, case DXGI_FORMAT_B8G8R8X8_UNORM, case DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM, case DXGI_FORMAT_B8G8R8A8_TYPELESS,
				// case DXGI_FORMAT_B8G8R8A8_UNORM_SRGB, case DXGI_FORMAT_B8G8R8X8_TYPELESS, case DXGI_FORMAT_B8G8R8X8_UNORM_SRGB

		// ---

			case ::DXGI_FORMAT_R8G8_TYPELESS:
			case ::DXGI_FORMAT_R8G8_UNORM:
			case ::DXGI_FORMAT_R8G8_UINT:
			case ::DXGI_FORMAT_R8G8_SNORM:
			case ::DXGI_FORMAT_R8G8_SINT:
			case ::DXGI_FORMAT_R16_TYPELESS:
			case ::DXGI_FORMAT_R16_FLOAT:
			case ::DXGI_FORMAT_D16_UNORM:
			case ::DXGI_FORMAT_R16_UNORM:
			case ::DXGI_FORMAT_R16_UINT:
			case ::DXGI_FORMAT_R16_SNORM:
			case ::DXGI_FORMAT_R16_SINT:
			case ::DXGI_FORMAT_B5G6R5_UNORM:
			case ::DXGI_FORMAT_B5G5R5A1_UNORM: {
				return 16u;
				break;
			}	// case DXGI_FORMAT_R8G8_TYPELESS, case DXGI_FORMAT_R8G8_UNORM, case DXGI_FORMAT_R8G8_UINT, case DXGI_FORMAT_R8G8_SNORM, case DXGI_FORMAT_R8G8_SINT, case DXGI_FORMAT_R16_TYPELESS,
				// case DXGI_FORMAT_R16_FLOAT, case DXGI_FORMAT_D16_UNORM, case DXGI_FORMAT_R16_UNORM, case DXGI_FORMAT_R16_UINT, case DXGI_FORMAT_R16_SNORM, case DXGI_FORMAT_R16_SINT,
				// case DXGI_FORMAT_B5G6R5_UNORM, case DXGI_FORMAT_B5G5R5A1_UNORM

		// ---

			case ::DXGI_FORMAT_R8_TYPELESS:
			case ::DXGI_FORMAT_R8_UNORM:
			case ::DXGI_FORMAT_R8_UINT:
			case ::DXGI_FORMAT_R8_SNORM:
			case ::DXGI_FORMAT_R8_SINT:
			case ::DXGI_FORMAT_A8_UNORM: {
				return 8u;
				break;
			}	// case DXGI_FORMAT_R8_TYPELESS, case DXGI_FORMAT_R8_UNORM, case DXGI_FORMAT_R8_UINT, case DXGI_FORMAT_R8_SNORM, case DXGI_FORMAT_R8_SINT, case DXGI_FORMAT_A8_UNORM

		// ---

			case ::DXGI_FORMAT_R1_UNORM: {
				return 1u;
				break;
			}	// case DXGI_FORMAT_R1_UNORM

		// ---

			case ::DXGI_FORMAT_BC1_TYPELESS:
			case ::DXGI_FORMAT_BC1_UNORM:
			case ::DXGI_FORMAT_BC1_UNORM_SRGB: {
				return 4u;
				break;
			}	// case DXGI_FORMAT_BC1_TYPELESS, case DXGI_FORMAT_BC1_UNORM, case DXGI_FORMAT_BC1_UNORM_SRGB

		// ---

			case ::DXGI_FORMAT_BC2_TYPELESS:
			case ::DXGI_FORMAT_BC2_UNORM:
			case ::DXGI_FORMAT_BC2_UNORM_SRGB:
			case ::DXGI_FORMAT_BC3_TYPELESS:
			case ::DXGI_FORMAT_BC3_UNORM:
			case ::DXGI_FORMAT_BC3_UNORM_SRGB:
			case ::DXGI_FORMAT_BC4_TYPELESS:
			case ::DXGI_FORMAT_BC4_UNORM:
			case ::DXGI_FORMAT_BC4_SNORM:
			case ::DXGI_FORMAT_BC5_TYPELESS:
			case ::DXGI_FORMAT_BC5_UNORM:
			case ::DXGI_FORMAT_BC5_SNORM:
			case ::DXGI_FORMAT_BC6H_TYPELESS:
			case ::DXGI_FORMAT_BC6H_UF16:
			case ::DXGI_FORMAT_BC6H_SF16:
			case ::DXGI_FORMAT_BC7_TYPELESS:
			case ::DXGI_FORMAT_BC7_UNORM:
			case ::DXGI_FORMAT_BC7_UNORM_SRGB: {
				return 8u;
				break;
			}	// case DXGI_FORMAT_BC2_TYPELESS, case DXGI_FORMAT_BC2_UNORM, case DXGI_FORMAT_BC2_UNORM_SRGB, case DXGI_FORMAT_BC3_TYPELESS, case DXGI_FORMAT_BC3_UNORM,
				// case DXGI_FORMAT_BC3_UNORM_SRGB, case DXGI_FORMAT_BC4_TYPELESS, case DXGI_FORMAT_BC4_UNORM, case DXGI_FORMAT_BC4_SNORM, case DXGI_FORMAT_BC5_TYPELESS,
				// case DXGI_FORMAT_BC5_UNORM, case DXGI_FORMAT_BC5_SNORM, case DXGI_FORMAT_BC6H_TYPELESS, case DXGI_FORMAT_BC6H_UF16, case DXGI_FORMAT_BC6H_SF16,
				// case DXGI_FORMAT_BC7_TYPELESS, case DXGI_FORMAT_BC7_UNORM, case DXGI_FORMAT_BC7_UNORM_SRGB

		// ---

			default: {
				return 0u;
				break;
			}	// default case
		}	// switch( fmt )
	}

// ---------------------------------------------------

	ETNoAliasHint void GetSurfaceInfo( uint32 width, uint32 height, ::DXGI_FORMAT fmt, uint32& numBytes, uint32& rowBytes, uint32& numRows ) {
		bool	blockCompressed = true;
		int		numBytesPerCompressedBlock = 16;

		switch( fmt ) {
			case ::DXGI_FORMAT_BC1_TYPELESS:
			case ::DXGI_FORMAT_BC1_UNORM:
			case ::DXGI_FORMAT_BC1_UNORM_SRGB:
			case ::DXGI_FORMAT_BC4_TYPELESS:
			case ::DXGI_FORMAT_BC4_UNORM:
			case ::DXGI_FORMAT_BC4_SNORM: {
				numBytesPerCompressedBlock = 8;
				break;
			}	// case DXGI_FORMAT_BC1_TYPELESS, case DXGI_FORMAT_BC1_UNORM, case DXGI_FORMAT_BC1_UNORM_SRGB, case DXGI_FORMAT_BC4_TYPELESS,
				// case DXGI_FORMAT_BC4_UNORM, case DXGI_FORMAT_BC4_SNORM

		// ---

			case ::DXGI_FORMAT_BC2_TYPELESS:
			case ::DXGI_FORMAT_BC2_UNORM:
			case ::DXGI_FORMAT_BC2_UNORM_SRGB:
			case ::DXGI_FORMAT_BC3_TYPELESS:
			case ::DXGI_FORMAT_BC3_UNORM:
			case ::DXGI_FORMAT_BC3_UNORM_SRGB:
			case ::DXGI_FORMAT_BC5_TYPELESS:
			case ::DXGI_FORMAT_BC5_UNORM:
			case ::DXGI_FORMAT_BC5_SNORM:
			case ::DXGI_FORMAT_BC6H_TYPELESS:
			case ::DXGI_FORMAT_BC6H_UF16:
			case ::DXGI_FORMAT_BC6H_SF16:
			case ::DXGI_FORMAT_BC7_TYPELESS:
			case ::DXGI_FORMAT_BC7_UNORM:
			case ::DXGI_FORMAT_BC7_UNORM_SRGB: {
				break;
			}	// case DXGI_FORMAT_BC2_TYPELESS, case DXGI_FORMAT_BC2_UNORM, case DXGI_FORMAT_BC2_UNORM_SRGB, case DXGI_FORMAT_BC3_TYPELESS, case DXGI_FORMAT_BC3_UNORM,
				// case DXGI_FORMAT_BC3_UNORM_SRGB, case DXGI_FORMAT_BC5_TYPELESS, case DXGI_FORMAT_BC5_UNORM, case DXGI_FORMAT_BC5_SNORM, case DXGI_FORMAT_BC6H_TYPELESS,
				// case DXGI_FORMAT_BC6H_UF16, case DXGI_FORMAT_BC6H_SF16, case DXGI_FORMAT_BC7_TYPELESS, case DXGI_FORMAT_BC7_UNORM, case DXGI_FORMAT_BC7_UNORM_SRGB

		// ---

			default: {
				blockCompressed = false;
				break;
			}	// default case
		}	// switch( fmt )

		if( blockCompressed ) {
			int	numBlocksWide = 0;
			int	numBlocksHigh = 0;

			if( !!width ) {
				numBlocksWide = Max<int>( 1, width / 4 );
			}

			if( !!height ) {
				numBlocksHigh = Max<int>( 1, height / 4 );
			}

			rowBytes = numBlocksWide * numBytesPerCompressedBlock;
			numRows = numBlocksHigh;
		} else {
			const uint32	bitsPerPixel( BitsPerPixel( fmt ) );

			rowBytes = ( width * bitsPerPixel + 7 ) / 8; // round up to nearest byte
			numRows = height;
		}

		numBytes = rowBytes * numRows;
	}

// ---------------------------------------------------

	ETNoAliasHint ::DXGI_FORMAT ResourceToTypelessFormat( ::DXGI_FORMAT resourceFormat ) {
		switch( resourceFormat ) {
			case ::DXGI_FORMAT_R32G32B32A32_TYPELESS:
			case ::DXGI_FORMAT_R32G32B32A32_FLOAT:
			case ::DXGI_FORMAT_R32G32B32A32_UINT:
			case ::DXGI_FORMAT_R32G32B32A32_SINT: {
				return ::DXGI_FORMAT_R32G32B32A32_TYPELESS;
				break;
			}	// case DXGI_FORMAT_R32G32B32A32_TYPELESS, case DXGI_FORMAT_R32G32B32A32_FLOAT, case DXGI_FORMAT_R32G32B32A32_UINT, case DXGI_FORMAT_R32G32B32A32_SINT

		// ---

			case ::DXGI_FORMAT_R32G32B32_TYPELESS:
			case ::DXGI_FORMAT_R32G32B32_FLOAT:
			case ::DXGI_FORMAT_R32G32B32_UINT:
			case ::DXGI_FORMAT_R32G32B32_SINT: {
				return ::DXGI_FORMAT_R32G32B32_TYPELESS;
				break;
			}	// case DXGI_FORMAT_R32G32B32_TYPELESS, case DXGI_FORMAT_R32G32B32_FLOAT, case DXGI_FORMAT_R32G32B32_UINT, case DXGI_FORMAT_R32G32B32_SINT

		// ---

			case ::DXGI_FORMAT_R16G16B16A16_TYPELESS:
			case ::DXGI_FORMAT_R16G16B16A16_FLOAT:
			case ::DXGI_FORMAT_R16G16B16A16_UNORM:
			case ::DXGI_FORMAT_R16G16B16A16_UINT:
			case ::DXGI_FORMAT_R16G16B16A16_SNORM:
			case ::DXGI_FORMAT_R16G16B16A16_SINT: {
				return ::DXGI_FORMAT_R16G16B16A16_TYPELESS;
				break;
			}	// case DXGI_FORMAT_R16G16B16A16_TYPELESS, case DXGI_FORMAT_R16G16B16A16_FLOAT, case DXGI_FORMAT_R16G16B16A16_UNORM, case DXGI_FORMAT_R16G16B16A16_UINT
				// case DXGI_FORMAT_R16G16B16A16_SNORM, case DXGI_FORMAT_R16G16B16A16_SINT

		// ---

			case ::DXGI_FORMAT_R32G32_TYPELESS:
			case ::DXGI_FORMAT_R32G32_FLOAT:
			case ::DXGI_FORMAT_R32G32_UINT:
			case ::DXGI_FORMAT_R32G32_SINT: {
				return ::DXGI_FORMAT_R32G32_TYPELESS;
				break;
			}	// case DXGI_FORMAT_R32G32_TYPELESS, case DXGI_FORMAT_R32G32_FLOAT, case DXGI_FORMAT_R32G32_UINT, case DXGI_FORMAT_R32G32_SINT

		// ---

			case ::DXGI_FORMAT_R32G8X24_TYPELESS:
			case ::DXGI_FORMAT_D32_FLOAT_S8X24_UINT:
			case ::DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS:
			case ::DXGI_FORMAT_X32_TYPELESS_G8X24_UINT: {
				return ::DXGI_FORMAT_R32G8X24_TYPELESS;
				break;
			}	// case DXGI_FORMAT_R32G8X24_TYPELESS, case DXGI_FORMAT_D32_FLOAT_S8X24_UINT, case DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS, case DXGI_FORMAT_X32_TYPELESS_G8X24_UINT

		// ---

			case ::DXGI_FORMAT_R10G10B10A2_TYPELESS:
			case ::DXGI_FORMAT_R10G10B10A2_UNORM:
			case ::DXGI_FORMAT_R10G10B10A2_UINT: {
				return ::DXGI_FORMAT_R10G10B10A2_TYPELESS;
				break;
			}	// case DXGI_FORMAT_R10G10B10A2_TYPELESS, case DXGI_FORMAT_R10G10B10A2_UNORM, case DXGI_FORMAT_R10G10B10A2_UINT

		// ---

			case ::DXGI_FORMAT_R11G11B10_FLOAT: {
				return ::DXGI_FORMAT_R11G11B10_FLOAT;
				break;
			}	// case DXGI_FORMAT_R11G11B10_FLOAT

		// ---

			case ::DXGI_FORMAT_R8G8B8A8_TYPELESS:
			case ::DXGI_FORMAT_R8G8B8A8_UNORM:
			case ::DXGI_FORMAT_R8G8B8A8_UNORM_SRGB:
			case ::DXGI_FORMAT_R8G8B8A8_UINT:
			case ::DXGI_FORMAT_R8G8B8A8_SNORM:
			case ::DXGI_FORMAT_R8G8B8A8_SINT: {
				return ::DXGI_FORMAT_R8G8B8A8_TYPELESS;
				break;
			}	// case DXGI_FORMAT_R8G8B8A8_TYPELESS, case DXGI_FORMAT_R8G8B8A8_UNORM, case DXGI_FORMAT_R8G8B8A8_UNORM_SRGB, case DXGI_FORMAT_R8G8B8A8_UINT, case DXGI_FORMAT_R8G8B8A8_SNORM,
				// case DXGI_FORMAT_R8G8B8A8_SINT

		// ---

			case ::DXGI_FORMAT_R16G16_TYPELESS:
			case ::DXGI_FORMAT_R16G16_FLOAT:
			case ::DXGI_FORMAT_R16G16_UNORM:
			case ::DXGI_FORMAT_R16G16_UINT:
			case ::DXGI_FORMAT_R16G16_SNORM:
			case ::DXGI_FORMAT_R16G16_SINT: {
				return ::DXGI_FORMAT_R16G16_TYPELESS;
				break;
			}	// case DXGI_FORMAT_R16G16_TYPELESS, case DXGI_FORMAT_R16G16_FLOAT, case DXGI_FORMAT_R16G16_UNORM, case DXGI_FORMAT_R16G16_UINT, case DXGI_FORMAT_R16G16_SNORM, case DXGI_FORMAT_R16G16_SINT

		// ---

			case ::DXGI_FORMAT_R32_TYPELESS:
			case ::DXGI_FORMAT_D32_FLOAT:
			case ::DXGI_FORMAT_R32_FLOAT:
			case ::DXGI_FORMAT_R32_UINT:
			case ::DXGI_FORMAT_R32_SINT: {
				return ::DXGI_FORMAT_R32_TYPELESS;
				break;
			}	// case DXGI_FORMAT_R32_TYPELESS, case DXGI_FORMAT_D32_FLOAT, case DXGI_FORMAT_R32_FLOAT, case DXGI_FORMAT_R32_UINT, case DXGI_FORMAT_R32_SINT

		// ---

			case ::DXGI_FORMAT_R24G8_TYPELESS:
			case ::DXGI_FORMAT_D24_UNORM_S8_UINT:
			case ::DXGI_FORMAT_R24_UNORM_X8_TYPELESS:
			case ::DXGI_FORMAT_X24_TYPELESS_G8_UINT: {
				return ::DXGI_FORMAT_R24G8_TYPELESS;
				break;
			}	// case DXGI_FORMAT_R24G8_TYPELESS, case DXGI_FORMAT_D24_UNORM_S8_UINT, case DXGI_FORMAT_R24_UNORM_X8_TYPELESS, case DXGI_FORMAT_X24_TYPELESS_G8_UINT

		// ---

			case ::DXGI_FORMAT_R8G8_TYPELESS:
			case ::DXGI_FORMAT_R8G8_UNORM:
			case ::DXGI_FORMAT_R8G8_UINT:
			case ::DXGI_FORMAT_R8G8_SNORM:
			case ::DXGI_FORMAT_R8G8_SINT: {
				return ::DXGI_FORMAT_R8G8_TYPELESS;
				break;
			}	// case DXGI_FORMAT_R8G8_TYPELESS, case DXGI_FORMAT_R8G8_UNORM, case DXGI_FORMAT_R8G8_UINT, case DXGI_FORMAT_R8G8_SNORM, case DXGI_FORMAT_R8G8_SINT

		// ---

			case ::DXGI_FORMAT_R16_TYPELESS:
			case ::DXGI_FORMAT_R16_FLOAT:
			case ::DXGI_FORMAT_D16_UNORM:
			case ::DXGI_FORMAT_R16_UNORM:
			case ::DXGI_FORMAT_R16_UINT:
			case ::DXGI_FORMAT_R16_SNORM:
			case ::DXGI_FORMAT_R16_SINT: {
				return ::DXGI_FORMAT_R16_TYPELESS;
				break;
			}	// case DXGI_FORMAT_R16_TYPELESS, case DXGI_FORMAT_R16_FLOAT, case DXGI_FORMAT_D16_UNORM, case DXGI_FORMAT_R16_UNORM, case DXGI_FORMAT_R16_UINT, case DXGI_FORMAT_R16_SNORM,
				// case DXGI_FORMAT_R16_SINT

		// ---

			case ::DXGI_FORMAT_R8_TYPELESS:
			case ::DXGI_FORMAT_R8_UNORM:
			case ::DXGI_FORMAT_R8_UINT:
			case ::DXGI_FORMAT_R8_SNORM:
			case ::DXGI_FORMAT_R8_SINT:
			case ::DXGI_FORMAT_A8_UNORM: {
				return ::DXGI_FORMAT_R8_TYPELESS;
				break;
			}	// case DXGI_FORMAT_R8_TYPELESS, case DXGI_FORMAT_R8_UNORM, case DXGI_FORMAT_R8_UINT, case DXGI_FORMAT_R8_SNORM, case DXGI_FORMAT_R8_SINT, case DXGI_FORMAT_A8_UNORM

		// ---

			case ::DXGI_FORMAT_R1_UNORM: {
				return ::DXGI_FORMAT_R1_UNORM;
				break;
			}	// case DXGI_FORMAT_R1_UNORM

		// ---

			case ::DXGI_FORMAT_R9G9B9E5_SHAREDEXP: {
				return ::DXGI_FORMAT_R9G9B9E5_SHAREDEXP;
				break;
			}	// case DXGI_FORMAT_R9G9B9E5_SHAREDEXP

		// ---

			case ::DXGI_FORMAT_R8G8_B8G8_UNORM: {
				return ::DXGI_FORMAT_R8G8_B8G8_UNORM;
				break;
			}	// case DXGI_FORMAT_R8G8_B8G8_UNORM

		// ---

			case ::DXGI_FORMAT_G8R8_G8B8_UNORM: {
				return ::DXGI_FORMAT_G8R8_G8B8_UNORM;
				break;
			}	// case DXGI_FORMAT_G8R8_G8B8_UNORM

		// ---

			case ::DXGI_FORMAT_BC1_TYPELESS:
			case ::DXGI_FORMAT_BC1_UNORM:
			case ::DXGI_FORMAT_BC1_UNORM_SRGB: {
				return ::DXGI_FORMAT_BC1_TYPELESS;
				break;
			}	// case DXGI_FORMAT_BC1_TYPELESS, case DXGI_FORMAT_BC1_UNORM, case DXGI_FORMAT_BC1_UNORM_SRGB

		// ---

			case ::DXGI_FORMAT_BC2_TYPELESS:
			case ::DXGI_FORMAT_BC2_UNORM:
			case ::DXGI_FORMAT_BC2_UNORM_SRGB: {
				return ::DXGI_FORMAT_BC2_TYPELESS;
				break;
			}	// case DXGI_FORMAT_BC2_TYPELESS, case DXGI_FORMAT_BC2_UNORM, case DXGI_FORMAT_BC2_UNORM_SRGB

		// ---

			case ::DXGI_FORMAT_BC3_TYPELESS:
			case ::DXGI_FORMAT_BC3_UNORM:
			case ::DXGI_FORMAT_BC3_UNORM_SRGB: {
				return ::DXGI_FORMAT_BC3_TYPELESS;
				break;
			}	// case DXGI_FORMAT_BC3_TYPELESS, case DXGI_FORMAT_BC3_UNORM, case DXGI_FORMAT_BC3_UNORM_SRGB

		// ---

			case ::DXGI_FORMAT_BC4_TYPELESS:
			case ::DXGI_FORMAT_BC4_UNORM:
			case ::DXGI_FORMAT_BC4_SNORM: {
				return ::DXGI_FORMAT_BC4_TYPELESS;
				break;
			}	// case DXGI_FORMAT_BC4_TYPELESS, case DXGI_FORMAT_BC4_UNORM, case DXGI_FORMAT_BC4_SNORM

		// ---

			case ::DXGI_FORMAT_BC5_TYPELESS:
			case ::DXGI_FORMAT_BC5_UNORM:
			case ::DXGI_FORMAT_BC5_SNORM: {
				return ::DXGI_FORMAT_BC5_TYPELESS;
				break;
			}	// case DXGI_FORMAT_BC5_TYPELESS, case DXGI_FORMAT_BC5_UNORM, case DXGI_FORMAT_BC5_SNORM

		// ---

			case ::DXGI_FORMAT_B5G6R5_UNORM: {
				return ::DXGI_FORMAT_B5G6R5_UNORM;
				break;
			}	// case DXGI_FORMAT_B5G6R5_UNORM

		// ---

			case ::DXGI_FORMAT_B5G5R5A1_UNORM: {
				return ::DXGI_FORMAT_B5G5R5A1_UNORM;
				break;
			}	// case DXGI_FORMAT_B5G5R5A1_UNORM

		// ---

			case ::DXGI_FORMAT_B8G8R8A8_TYPELESS:
			case ::DXGI_FORMAT_B8G8R8A8_UNORM: {
				return ::DXGI_FORMAT_B8G8R8A8_TYPELESS;
				break;
			}	// case DXGI_FORMAT_B8G8R8A8_TYPELESS, case DXGI_FORMAT_B8G8R8A8_UNORM

		// ---

			case ::DXGI_FORMAT_B8G8R8X8_TYPELESS:
			case ::DXGI_FORMAT_B8G8R8X8_UNORM: {
				return ::DXGI_FORMAT_B8G8R8X8_TYPELESS;
				break;
			}	// case DXGI_FORMAT_B8G8R8X8_TYPELESS, case DXGI_FORMAT_B8G8R8X8_UNORM

		// ---

			case ::DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM: {
				return ::DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM;
				break;
			}	// case DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM

		// ---

			case ::DXGI_FORMAT_B8G8R8A8_UNORM_SRGB: {
				return ::DXGI_FORMAT_B8G8R8A8_TYPELESS;
				break;
			}	// case DXGI_FORMAT_B8G8R8A8_UNORM_SRGB

		// ---
			
			case ::DXGI_FORMAT_B8G8R8X8_UNORM_SRGB: {
				return ::DXGI_FORMAT_B8G8R8X8_TYPELESS;
				break;
			}	// case DXGI_FORMAT_B8G8R8X8_UNORM_SRGB

		// ---
			
			case ::DXGI_FORMAT_BC6H_TYPELESS:
			case ::DXGI_FORMAT_BC6H_UF16:
			case ::DXGI_FORMAT_BC6H_SF16: {
				return ::DXGI_FORMAT_BC6H_TYPELESS;
				break;
			}	// case DXGI_FORMAT_BC6H_TYPELESS, case DXGI_FORMAT_BC6H_UF16, case DXGI_FORMAT_BC6H_SF16

		// ---
			
			case ::DXGI_FORMAT_BC7_TYPELESS:
			case ::DXGI_FORMAT_BC7_UNORM:
			case ::DXGI_FORMAT_BC7_UNORM_SRGB: {
				return ::DXGI_FORMAT_BC7_TYPELESS;
				break;
			}	// case DXGI_FORMAT_BC7_TYPELESS, case DXGI_FORMAT_BC7_UNORM, case DXGI_FORMAT_BC7_UNORM_SRGB

		// ---

			default: {
				return ::DXGI_FORMAT_UNKNOWN;
				break;
			}	// default case
		}	// switch( resourceFormat )
	}

// ---------------------------------------------------

	ETNoAliasHint ::DXGI_FORMAT BuildDXGIFormat( const GPULayout layout, const GPUStorageFormat format, const FilteringFlags flags ) {
		struct FormatData {
			struct sRGBData {
				::DXGI_FORMAT	sRGBFormats[2];
			};

			sRGBData			formats[GPUStorageFormat::COUNT];
		};

	// ---

		static const FormatData textureLayouts[GPULayout::COUNT] = {
			{{	// _32_32_32_32
				{{ ::DXGI_FORMAT_UNKNOWN,				::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN,				::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_R32G32B32A32_UINT,		::DXGI_FORMAT_R32G32B32A32_UINT }},
				{{ ::DXGI_FORMAT_R32G32B32A32_SINT,		::DXGI_FORMAT_R32G32B32A32_SINT }},
				{{ ::DXGI_FORMAT_R32G32B32A32_FLOAT,	::DXGI_FORMAT_R32G32B32A32_FLOAT }}
			}},
			{{	// _32_32_32
				{{ ::DXGI_FORMAT_UNKNOWN,			::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN,			::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_R32G32B32_UINT,	::DXGI_FORMAT_R32G32B32_UINT }},
				{{ ::DXGI_FORMAT_R32G32B32_SINT,	::DXGI_FORMAT_R32G32B32_SINT }},
				{{ ::DXGI_FORMAT_R32G32B32_FLOAT,	::DXGI_FORMAT_R32G32B32_FLOAT }}
			}},
			{{	// _32_32
				{{ ::DXGI_FORMAT_UNKNOWN,		::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN,		::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_R32G32_UINT,	::DXGI_FORMAT_R32G32_UINT }},
				{{ ::DXGI_FORMAT_R32G32_SINT,	::DXGI_FORMAT_R32G32_SINT }},
				{{ ::DXGI_FORMAT_R32G32_FLOAT,	::DXGI_FORMAT_R32G32_FLOAT }}
			}},
			{{	// _32
				{{ ::DXGI_FORMAT_UNKNOWN,	::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN,	::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_R32_UINT,	::DXGI_FORMAT_R32_UINT }},
				{{ ::DXGI_FORMAT_R32_SINT,	::DXGI_FORMAT_R32_SINT }},
				{{ ::DXGI_FORMAT_R32_FLOAT,	::DXGI_FORMAT_R32_FLOAT }}
			}},
			{{	// _16_16_16_16
				{{ ::DXGI_FORMAT_R16G16B16A16_UNORM,	::DXGI_FORMAT_R16G16B16A16_UNORM }},
				{{ ::DXGI_FORMAT_R16G16B16A16_SNORM,	::DXGI_FORMAT_R16G16B16A16_SNORM }},
				{{ ::DXGI_FORMAT_R16G16B16A16_UINT,		::DXGI_FORMAT_R16G16B16A16_UINT }},
				{{ ::DXGI_FORMAT_R16G16B16A16_SINT,		::DXGI_FORMAT_R16G16B16A16_SINT }},
				{{ ::DXGI_FORMAT_R16G16B16A16_FLOAT,	::DXGI_FORMAT_R16G16B16A16_FLOAT }}
			}},
			{{	// _16_16
				{{ ::DXGI_FORMAT_R16G16_UNORM,	::DXGI_FORMAT_R16G16_UNORM }},
				{{ ::DXGI_FORMAT_R16G16_SNORM,	::DXGI_FORMAT_R16G16_SNORM }},
				{{ ::DXGI_FORMAT_R16G16_UINT,	::DXGI_FORMAT_R16G16_UINT }},
				{{ ::DXGI_FORMAT_R16G16_SINT,	::DXGI_FORMAT_R16G16_SINT }},
				{{ ::DXGI_FORMAT_R16G16_FLOAT,	::DXGI_FORMAT_R16G16_FLOAT }}
			}},
			{{	// _16
				{{ ::DXGI_FORMAT_R16_UNORM, ::DXGI_FORMAT_R16_UNORM }},
				{{ ::DXGI_FORMAT_R16_SNORM, ::DXGI_FORMAT_R16_SNORM }},
				{{ ::DXGI_FORMAT_R16_UINT,  ::DXGI_FORMAT_R16_UINT }},
				{{ ::DXGI_FORMAT_R16_SINT,  ::DXGI_FORMAT_R16_SINT }},
				{{ ::DXGI_FORMAT_R16_FLOAT, ::DXGI_FORMAT_R16_FLOAT }}
			}},
			{{	// _10_10_10_2
				{{ ::DXGI_FORMAT_R10G10B10A2_UNORM,	::DXGI_FORMAT_R10G10B10A2_UNORM }},
				{{ ::DXGI_FORMAT_UNKNOWN,			::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_R10G10B10A2_UINT,	::DXGI_FORMAT_R10G10B10A2_UINT }},
				{{ ::DXGI_FORMAT_UNKNOWN,			::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN,			::DXGI_FORMAT_UNKNOWN }}
			}},
			{{	// _11_11_10
				{{ ::DXGI_FORMAT_UNKNOWN,			::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN,			::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN,			::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN,			::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_R11G11B10_FLOAT,	::DXGI_FORMAT_R11G11B10_FLOAT }}
			}},
			{{	// _8_8_8_8
				{{ ::DXGI_FORMAT_R8G8B8A8_UNORM,	::DXGI_FORMAT_R8G8B8A8_UNORM_SRGB }},
				{{ ::DXGI_FORMAT_R8G8B8A8_SNORM,	::DXGI_FORMAT_R8G8B8A8_SNORM }},
				{{ ::DXGI_FORMAT_R8G8B8A8_UINT,		::DXGI_FORMAT_R8G8B8A8_UINT }},
				{{ ::DXGI_FORMAT_R8G8B8A8_SINT,		::DXGI_FORMAT_R8G8B8A8_UINT }},
				{{ ::DXGI_FORMAT_UNKNOWN,			::DXGI_FORMAT_UNKNOWN }}
			}},
			{{	// _8_8
				{{ ::DXGI_FORMAT_R8G8_UNORM,	::DXGI_FORMAT_R8G8_UNORM }},
				{{ ::DXGI_FORMAT_R8G8_SNORM,	::DXGI_FORMAT_R8G8_SNORM }},
				{{ ::DXGI_FORMAT_R8G8_UINT,		::DXGI_FORMAT_R8G8_UINT }},
				{{ ::DXGI_FORMAT_R8G8_SINT,		::DXGI_FORMAT_R8G8_SINT }},
				{{ ::DXGI_FORMAT_UNKNOWN,		::DXGI_FORMAT_UNKNOWN }}
			}},
			{{	// _8
				{{ ::DXGI_FORMAT_R8_UNORM,	::DXGI_FORMAT_R8_UNORM }},
				{{ ::DXGI_FORMAT_R8_SNORM,	::DXGI_FORMAT_R8_SNORM }},
				{{ ::DXGI_FORMAT_R8_UINT,	::DXGI_FORMAT_R8_UINT }},
				{{ ::DXGI_FORMAT_R8_SINT,	::DXGI_FORMAT_R8_SINT }},
				{{ ::DXGI_FORMAT_UNKNOWN,	::DXGI_FORMAT_UNKNOWN }}
			}},
			{{	// _24_8
				{{ ::DXGI_FORMAT_D24_UNORM_S8_UINT,	::DXGI_FORMAT_D24_UNORM_S8_UINT }},
				{{ ::DXGI_FORMAT_UNKNOWN, 			::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN, 			::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN, 			::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN, 			::DXGI_FORMAT_UNKNOWN }}
			}},
			{{	// _9_9_9_5
				{{ ::DXGI_FORMAT_UNKNOWN, 				::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN, 				::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN, 				::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN, 				::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_R9G9B9E5_SHAREDEXP,	::DXGI_FORMAT_R9G9B9E5_SHAREDEXP }}
			}},
			{{	// _5_6_5
				{{ ::DXGI_FORMAT_B5G6R5_UNORM,	::DXGI_FORMAT_B5G6R5_UNORM }},
				{{ ::DXGI_FORMAT_UNKNOWN,		::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN,		::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN,		::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN,		::DXGI_FORMAT_UNKNOWN }}
			}},
			{{	// _DXT1
				{{ ::DXGI_FORMAT_BC1_UNORM,	::DXGI_FORMAT_BC1_UNORM_SRGB }},
				{{ ::DXGI_FORMAT_UNKNOWN,	::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN,	::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN,	::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN,	::DXGI_FORMAT_UNKNOWN }}
			}},
			{{	// _DXT3
				{{ ::DXGI_FORMAT_BC2_UNORM,	::DXGI_FORMAT_BC2_UNORM_SRGB }},
				{{ ::DXGI_FORMAT_UNKNOWN,	::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN,	::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN,	::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN,	::DXGI_FORMAT_UNKNOWN }}
			}},
			{{	// _DXT5
				{{ ::DXGI_FORMAT_BC3_UNORM,	::DXGI_FORMAT_BC3_UNORM_SRGB }},
				{{ ::DXGI_FORMAT_UNKNOWN,	::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN,	::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN,	::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN,	::DXGI_FORMAT_UNKNOWN }}
			}},
			{{	// _BC4
				{{ ::DXGI_FORMAT_BC4_UNORM, ::DXGI_FORMAT_BC4_UNORM }},
				{{ ::DXGI_FORMAT_BC4_SNORM, ::DXGI_FORMAT_BC4_SNORM }},
				{{ ::DXGI_FORMAT_UNKNOWN,	::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN,	::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN,	::DXGI_FORMAT_UNKNOWN }}
			}},
			{{	// _BC5
				{{ ::DXGI_FORMAT_BC5_UNORM,	::DXGI_FORMAT_BC5_UNORM }},
				{{ ::DXGI_FORMAT_BC5_SNORM,	::DXGI_FORMAT_BC5_SNORM }},
				{{ ::DXGI_FORMAT_UNKNOWN,	::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN,	::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN,	::DXGI_FORMAT_UNKNOWN }}
			}},
			{{	// _BC6
				{{ ::DXGI_FORMAT_BC6H_UF16,	::DXGI_FORMAT_BC6H_UF16 }},
				{{ ::DXGI_FORMAT_BC6H_SF16,	::DXGI_FORMAT_BC6H_SF16 }},
				{{ ::DXGI_FORMAT_UNKNOWN,	::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN,	::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_BC6H_SF16,	::DXGI_FORMAT_BC6H_SF16 }}
			}},
			{{	// _BC7
				{{ ::DXGI_FORMAT_BC7_UNORM,	::DXGI_FORMAT_BC7_UNORM_SRGB }},
				{{ ::DXGI_FORMAT_UNKNOWN,	::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN,	::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN,	::DXGI_FORMAT_UNKNOWN }},
				{{ ::DXGI_FORMAT_UNKNOWN,	::DXGI_FORMAT_UNKNOWN }}
			}}
		};

		if( (layout < GPULayout::COUNT) & (format < GPUStorageFormat::COUNT) ) {
			return textureLayouts[static_cast<size_t>(layout)].formats[static_cast<size_t>(format)].sRGBFormats[static_cast<bool>(flags & FilteringFlags::SAMPLE_AS_SRGB)];
		}

		return ::DXGI_FORMAT_UNKNOWN;
	}

// ---------------------------------------------------

	ETNoAliasHint ::DXGI_FORMAT ResourceToSRVFormat( ::DXGI_FORMAT resourceFormat ) {
		switch( resourceFormat ) {
			case ::DXGI_FORMAT_D24_UNORM_S8_UINT: {
				return ::DXGI_FORMAT_R24_UNORM_X8_TYPELESS;
				break;
			}	// case DXGI_FORMAT_D24_UNORM_S8_UINT

		// ---

			case ::DXGI_FORMAT_D32_FLOAT: {
				return ::DXGI_FORMAT_R32_FLOAT;
				break;
			}	// case DXGI_FORMAT_D32_FLOAT

		// ---

			case ::DXGI_FORMAT_D16_UNORM: {
				return ::DXGI_FORMAT_R16_UNORM;
				break;
			}	// case DXGI_FORMAT_D16_UNORM

		// ---

			default: {
				return resourceFormat;
				break;
			}	// default case
		}	// switch( resourceFormat )
	}

// ---------------------------------------------------

	ETNoAliasHint ::DXGI_FORMAT ResourceToRTVFormat( ::DXGI_FORMAT resourceFormat ) {
		return resourceFormat;
	}

// ---------------------------------------------------

	ETNoAliasHint ::DXGI_FORMAT ResourceToDSVFormat( ::DXGI_FORMAT resourceFormat ) {
		return resourceFormat;
	}

}	// namespace Renderer
}	// namespace Eldritch2