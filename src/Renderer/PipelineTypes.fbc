namespace Eldritch2.Renderer.FlatBuffers;

enum FillMode : ubyte {
	Wireframe,
	Solid
}

enum CullMode : ubyte {
	FrontFace,
	BackFace,
	None
}

enum BlendOperator : ubyte {
	Add,
	Subtract,
	ReverseSubtract,
	Minimum,
	Maximum
}

enum ColorBlendFactor : ubyte {
	Zero,
	One,
	SourceColor,
	OneMinusSourceColor,
	SourceAlpha,
	OneMinusSourceAlpha,
	DestinationAlpha,
	OneMinusDestinationAlpha,
	DestinationColor,
	OneMinusDestinationColor,
	SaturatedSourceAlpha,
	BlendFactor,
	OneMinusBlendFactor,
	DualSourceColor,
	OneMinusDualSourceColor,
	DualSourceAlpha,
	OneMinusDualSourceAlpha
}

enum AlphaBlendFactor : ubyte {
	Zero,
	One,
	SourceAlpha,
	OneMinusSourceAlpha,
	DestinationAlpha,
	OneMinusDestinationAlpha,
	SaturatedSourceAlpha,
	BlendFactor,
	OneMinusBlendFactor,
	DualSourceAlpha,
	OneMinusDualSourceAlpha
}

enum RasterizerFlags : ubyte (bit_flags) {
	DepthClipEnable,
	ScissorClipEnable,
	MultisampleWithRenderTargetSupport,
}

enum DepthStencilFlags : ubyte (bit_flags) {
	DepthTestEnable,
	StencilTestEnable,
	DepthWriteEnable
}

enum ComparisonFunction : ubyte {
	NeverPass,
	PassIfLess,
	PassIfEqual,
	PassIfLessOrEqual,
	PassIfGreater,
	PassIfNotEqual,
	PassIfGreaterOrEqual,
	AlwaysPass
}

enum StencilOperation : ubyte {
	KeepExisting,
	SetZero,
	ReplaceExisting,
	IncrementAndSaturate,
	DecrementAndSaturate,
	InvertExisting,
	IncrementWithWrap,
	DecrementWithWrap
}

struct StencilBehavior {
	StencilAndDepthFailBehavior		: StencilOperation		= KeepExisting;
	StencilPassDepthFailBehavior	: StencilOperation		= KeepExisting;
	StencilAndDepthPassBehavior		: StencilOperation		= KeepExisting;
	StencilComparisonFunction		: ComparisonFunction	= AlwaysPass;
}

table RasterizerState {
	FillMode						: FillMode				= Solid;
	CullMode						: CullMode				= BackFace;
	DepthBias						: int					= 0;
	DepthBiasClamp					: float					= 0.0;
	SlopeScaledDepthBias			: float					= 0.0;
	Flags							: RasterizerFlags		= DepthClipEnable;
}

table DepthStencilState {
	Flags							: DepthStencilFlags;
	DepthComparisonFunction			: ComparisonFunction	= PassIfLess;
	StencilReadMask					: ubyte					= 255;
	StencilWriteMask				: ubyte					= 255;
	
	FrontFaceBehavior				: StencilBehavior;
	BackFaceBehavior				: StencilBehavior;
}

table RenderTargetState {
	Name							: string (required);

	SourceColorBlendFactor			: ColorBlendFactor		= One;
	DestinationColorBlendFactor		: ColorBlendFactor		= Zero;
	ColorBlendOperator				: BlendOperator			= Add;

	SourceAlphaBlendFactor			: AlphaBlendFactor		= One;
	DestinationAlphaBlendFactor		: AlphaBlendFactor		= Zero;
	AlphaBlendOperator				: BlendOperator			= Add;
	WriteMask						: ubyte					= 255;
}

table UnorderedAccessViewState {
	Name							: string (required);
}

table Usage {
	RasterizerState					: RasterizerState (required);
	DepthStencilState				: DepthStencilState (required);
	RenderTargets					: [RenderTargetState] (required);
	UnorderedAccessViews			: [UnorderedAccessViewState] (required);
	VertexShaderIndex				: ushort;
	HullShaderIndex					: ushort;
	DomainShaderIndex				: ushort;
	GeometryShaderIndex				: ushort;
	PixelShaderIndex				: ushort;
}