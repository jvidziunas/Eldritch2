namespace Eldritch2.Graphics.FlatBuffers;

enum PolygonFillMode : ubyte {
	Wireframe,
	Solid
}

enum FaceCullMode : ubyte {
	FrontFace,
	BackFace,
	None
}

enum BlendOperator : ubyte {
	Add,
	Subtract,
	ReverseSubtract,
	Minimum,
	Maximum
}

enum ColorBlendFactor : ubyte {
	Zero,
	One,
	SourceColor,
	OneMinusSourceColor,
	SourceAlpha,
	OneMinusSourceAlpha,
	DestinationAlpha,
	OneMinusDestinationAlpha,
	DestinationColor,
	OneMinusDestinationColor,
	SaturatedSourceAlpha,
	BlendFactor,
	OneMinusBlendFactor,
	BlendFactorAlpha,
	OneMinusBlendFactorAlpha,
	DualSourceColor,
	OneMinusDualSourceColor,
	DualSourceAlpha,
	OneMinusDualSourceAlpha
}

enum AlphaBlendFactor : ubyte {
	Zero,
	One,
	SourceAlpha,
	OneMinusSourceAlpha,
	DestinationAlpha,
	OneMinusDestinationAlpha,
	SaturatedSourceAlpha,
	BlendFactorAlpha,
	OneMinusBlendFactorAlpha,
	DualSourceAlpha,
	OneMinusDualSourceAlpha
}

enum ChannelWriteMask : ubyte (bit_flags) {
	Red,
	Green,
	Blue,
	Alpha
}

enum RasterizationFlags : ubyte (bit_flags) {
	DepthClipEnable,
	ScissorClipEnable,
	AllowMsaa,
}

enum DepthStencilFlags : ubyte (bit_flags) {
	DepthTestEnable,
	StencilTestEnable,
	DepthWriteEnable
}

enum ComparisonFunction : ubyte {
	NeverPass,
	PassIfLess,
	PassIfEqual,
	PassIfLessOrEqual,
	PassIfGreater,
	PassIfNotEqual,
	PassIfGreaterOrEqual,
	AlwaysPass
}

enum StencilOperation : ubyte {
	KeepExisting,
	SetZero,
	ReplaceExisting,
	IncrementWithSaturate,
	DecrementWithSaturate,
	InvertExisting,
	IncrementWithWrap,
	DecrementWithWrap
}

struct StencilDescriptor {
	StencilAndDepthFailBehavior		: StencilOperation		= KeepExisting;
	StencilPassDepthFailBehavior	: StencilOperation		= KeepExisting;
	StencilAndDepthPassBehavior		: StencilOperation		= KeepExisting;
	StencilComparisonFunction		: ComparisonFunction	= AlwaysPass;
}

table RasterizerDescriptor {
	FillMode						: PolygonFillMode		= Solid;
	CullMode						: FaceCullMode			= BackFace;
	DepthBias						: int					= 0;
	DepthBiasClamp					: float					= 0.0;
	SlopeScaledDepthBias			: float					= 0.0;
	Flags							: RasterizationFlags	= DepthClipEnable;
}

table DepthStencilDescriptor {
	Flags							: DepthStencilFlags;
	DepthComparisonFunction			: ComparisonFunction	= PassIfLess;
	
	FrontFaceBehavior				: StencilDescriptor;
	BackFaceBehavior				: StencilDescriptor;
}

table OutputDescriptor {
	SourceColorBlendFactor			: ColorBlendFactor		= One;
	DestinationColorBlendFactor		: ColorBlendFactor		= Zero;
	ColorBlendOperator				: BlendOperator			= Add;

	SourceAlphaBlendFactor			: AlphaBlendFactor		= One;
	DestinationAlphaBlendFactor		: AlphaBlendFactor		= Zero;
	AlphaBlendOperator				: BlendOperator			= Add;
	WriteMask						: ChannelWriteMask		= 255;
}

table UnorderedAccessViewDescriptor {
}

enum StageFlags : ubyte (bit_flags) {
	VertexShader,
	HullShader,
	DomainShader,
	GeometryShader,
	FragmentShader
}

table ShaderDescriptor {
	Name					: string (required, key);
	Stages					: StageFlags;
	Rasterizer	            : RasterizerDescriptor (required);
	DepthStencil	        : DepthStencilDescriptor (required);
	Outputs					: [OutputDescriptor];
	UnorderedAccessViews	: [UnorderedAccessViewDescriptor];
}