#include "Eldritch2Types.isph"

inline float Dot( float<2> a, float<2> b ) {
	return (a.x * b.x) + (a.y * b.y);
}

inline float Dot( float<3> a, float<3> b ) {
	return (a.x * b.x) + (a.y * b.y) + (a.z * b.z);
}

inline float Dot( float<4> a, float<4> b ) {
	return (a.x * b.x) + (a.y * b.y) + (a.z * b.z) + (a.w * b.w);
}

inline float<2> LinearInterpolate( float<2> a, float<2> b, float alpha ) {
    return (1.f - alpha) * a + alpha * b;
}

inline float<3> LinearInterpolate( float<3> a, float<3> b, float alpha ) {
    return (1.f - alpha) * a + alpha * b;
}

inline float<4> LinearInterpolate( float<4> a, float<4> b, float alpha ) {
    return (1.f - alpha) * a + alpha * b;
}

inline float<2> Normalize( float<2> vector ) {
	return vector * rsqrt( Dot( vector, vector ) );
}

inline float<3> Normalize( float<3> vector ) {
	return vector * rsqrt( Dot( vector, vector ) );
}

inline float<4> Normalize( float<4> vector ) {
	return vector * rsqrt( Dot( vector, vector ) );
}

// Adapted from the original by Jonathan Blow, see http://number-none.com/product/Hacking%20Quaternions/index.html
// In particular, the alpha parameter has been changed to take the cosine thereof to exploit the quaternion Dot product.
float QuaternionAlphaCorrection( float alpha, float alphaK, float alphaAttenuation, float cosAlpha ) {
	const double	factor = 1.0 - ( alphaAttenuation * cosAlpha );
	const float	k = alphaK * factor * factor;
	const float	b =  2.0f * k;
	const float	c = -3.0f * k;
	const float	d =  1.0f + k;

	return alpha * ( b * alpha + c ) + d;
}

inline Quaternion QuaternionLerp( Quaternion a, Quaternion b, float alpha ) {
	return Normalize( LinearInterpolate( a, b, alpha ) );
}

Quaternion ConstantVelocityQuaternionLerp( Quaternion a, Quaternion b, float alpha ) {
//	RMS minimized coefficients for the quaternion alpha spline adjustment.
//	Taken from http://number-none.com/product/Hacking%20Quaternions/index.html
	return QuaternionLerp( a, b, QuaternionAlphaCorrection( alpha, 0.5069269, 0.7878088, Dot( a, b ) ) );
}

inline Quaternion FlipW( Quaternion q ) {
	q.w = floatbits(intbits(q.w) ^ intbits(-0x0p0));
	return q;
}

Quaternion QuaternionMultiply( Quaternion q0, Quaternion q1 ) {
	return (q0 * q1.wwww) - (q0.zxyx * q1.yzxx) + FlipW( q0.yzxz * q1.zxyz ) + FlipW( q0.wwwy * q1.xyzy );
}

float<2> HermiteSpline( float<2> point0, float<2> tangent0, float<2> point1, float<2> tangent1, float alpha ) {
//	Evaluate the spline using the DeCasteljau method
	float<2> temp = LinearInterpolate( tangent0, point1, alpha );
	return LinearInterpolate(
		LinearInterpolate(
			LinearInterpolate( point0, tangent0, alpha ),
			temp,
			alpha
		),
		LinearInterpolate(
			temp,
			LinearInterpolate( point1, tangent1, alpha ),
			alpha ),
		alpha
	);
}

float<3> HermiteSpline( float<3> point0, float<3> tangent0, float<3> point1, float<3> tangent1, float alpha ) {
//	Evaluate the spline using the DeCasteljau method
	float<3> temp = LinearInterpolate( tangent0, point1, alpha );
	return LinearInterpolate(
		LinearInterpolate(
			LinearInterpolate( point0, tangent0, alpha ),
			temp,
			alpha
		),
		LinearInterpolate(
			temp,
			LinearInterpolate( point1, tangent1, alpha ),
			alpha ),
		alpha
	);
}

float<4> HermiteSpline( float<4> point0, float<4> tangent0, float<4> point1, float<4> tangent1, float alpha ) {
//	Evaluate the spline using the DeCasteljau method
	float<4> temp = LinearInterpolate( tangent0, point1, alpha );
	return LinearInterpolate(
		LinearInterpolate(
			LinearInterpolate( point0, tangent0, alpha ),
			temp,
			alpha
		),
		LinearInterpolate(
			temp,
			LinearInterpolate( point1, tangent1, alpha ),
			alpha ),
		alpha
	);
}